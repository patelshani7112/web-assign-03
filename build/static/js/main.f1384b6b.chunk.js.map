{"version":3,"sources":["component/About.js","component/Restaurant.js","component/Restaurants.js","component/NotFound.js","App.js","reportWebVitals.js","index.js"],"names":["About","Card","Header","as","Body","Title","ListGroup","className","ListGroupItem","Restaurant","useState","restaurant","setRestaurant","loading","setLoading","id","useParams","useEffect","fetch","then","res","json","data","hasOwnProperty","Text","name","Subtitle","address","building","street","MapContainer","style","height","center","coord","zoom","scrollWheelZoom","TileLayer","url","Marker","position","CardDeck","grades","map","i","grade","score","Restaurants","props","restaurants","setRestaurants","page","setPage","history","useHistory","location","queryString","parse","useLocation","search","borough","length","Table","striped","bordered","hover","onClick","push","_id","cuisine","Pagination","Prev","Item","Next","NotFound","App","searchString","setSearchString","Navbar","bg","expand","to","Brand","Toggle","Collapse","Nav","Link","Form","onSubmit","e","preventDefault","prevString","inline","FormControl","type","placeholder","value","onChange","target","Button","variant","Container","Row","Col","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f1384b6b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, ListGroup, ListGroupItem } from \"react-bootstrap\";\r\n\r\nfunction About() {\r\n  return (\r\n    <Card>\r\n      <Card.Header as=\"h3\">About</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title>Studet Information</Card.Title>\r\n        <ListGroup className=\"list-group-flush\">\r\n          <ListGroupItem>\r\n            <strong>Student Name:</strong> Shani Patel\r\n          </ListGroupItem>\r\n          <ListGroupItem>\r\n            <strong>Student ID # :</strong> 152243192\r\n          </ListGroupItem>\r\n          <ListGroupItem>\r\n            <strong>Assignment :</strong> WEB 422 - Assignment 03: my-app\r\n          </ListGroupItem>\r\n          <ListGroupItem>\r\n            <strong>submission Date:</strong> October 14, 2021\r\n          </ListGroupItem>\r\n          <ListGroupItem>\r\n            <strong>submission Due Date:</strong> October 15, 2021\r\n          </ListGroupItem>\r\n        </ListGroup>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import { MapContainer, TileLayer, Marker } from \"react-leaflet\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Card, CardDeck } from \"react-bootstrap\";\r\n\r\nfunction Restaurant() {\r\n  const [restaurant, setRestaurant] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const { id } = useParams();\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    fetch(`https://web422-shani-assign01.herokuapp.com/api/restaurants/${id}`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.hasOwnProperty(\"_id\")) {\r\n          setRestaurant(data);\r\n        } else {\r\n          setRestaurant(null);\r\n        }\r\n        setLoading(false);\r\n      });\r\n  }, [id]);\r\n\r\n  function restaurants() {\r\n    if (loading) {\r\n      return (\r\n        <div>\r\n          <Card>\r\n            <Card.Body>\r\n              <Card.Text>Loading Restaurants...</Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <Card>\r\n            <Card.Header>\r\n              <Card.Title>{restaurant.name}</Card.Title>\r\n              <Card.Subtitle>\r\n                {restaurant.address.building + \" \" + restaurant.address.street}\r\n              </Card.Subtitle>\r\n            </Card.Header>\r\n          </Card>\r\n          <br />\r\n          <MapContainer\r\n            style={{ height: \"400px\" }}\r\n            center={[restaurant.address.coord[1], restaurant.address.coord[0]]}\r\n            zoom={13}\r\n            scrollWheelZoom={false}\r\n          >\r\n            <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n            <Marker\r\n              position={[\r\n                restaurant.address.coord[1],\r\n                restaurant.address.coord[0],\r\n              ]}\r\n            ></Marker>\r\n          </MapContainer>\r\n          <br />\r\n          <CardDeck>\r\n            {restaurant.grades.map((res, i) => {\r\n              return (\r\n                <div key={`${i}-${res.score}`}>\r\n                  <Card>\r\n                    <Card.Body>\r\n                      <Card.Text>Grade: {res.grade}</Card.Text>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </div>\r\n              );\r\n            })}\r\n          </CardDeck>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  return restaurants();\r\n}\r\n\r\nexport default Restaurant;\r\n","import { useLocation } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport queryString from \"query-string\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Card, Table, Pagination } from \"react-bootstrap\";\r\n\r\nfunction Restaurants(props) {\r\n  const [restaurants, setRestaurants] = useState(null);\r\n  const [page, setPage] = useState(1);\r\n  const perPage = 10;\r\n\r\n  let history = useHistory();\r\n  let query = queryString.parse(useLocation().search);\r\n  let location = query.borough;\r\n\r\n  useEffect(() => {\r\n    let url;\r\n    if (location) {\r\n      url = `https://web422-shani-assign01.herokuapp.com/api/restaurants?page=${page}&perPage=${perPage}&borough=${location}`;\r\n    } else {\r\n      url = `https://web422-shani-assign01.herokuapp.com/api/restaurants?page=${page}&perPage=${perPage}`;\r\n    }\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setRestaurants(data);\r\n      });\r\n  }, [page, location]);\r\n\r\n  function previousPage() {\r\n    if (page > 1) {\r\n      setPage(page - 1);\r\n    }\r\n  }\r\n\r\n  function nextPage() {\r\n    setPage(page + 1);\r\n  }\r\n\r\n  if (!restaurants) {\r\n    return (\r\n      <div>\r\n        <Card>\r\n          <Card.Body>\r\n            <Card.Text>Loading Restaurants...</Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    );\r\n  } else {\r\n    if (restaurants.length > 0) {\r\n      return (\r\n        <div>\r\n          <Card>\r\n            <Card.Body>\r\n              <Card.Title>Restaurant List</Card.Title>\r\n              <Card.Text>\r\n                Full list of restaurants. Optionally sorted by borough\r\n              </Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n          <br />\r\n          <Table striped bordered hover>\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Address</th>\r\n                <th>Borough</th>\r\n                <th>Cuisine</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {restaurants.map((restaurant) => (\r\n                <tr\r\n                  onClick={() => {\r\n                    history.push(`/restaurant/${restaurant._id}`);\r\n                  }}\r\n                  key={restaurant._id}\r\n                >\r\n                  <td>{restaurant.name}</td>\r\n                  <td>\r\n                    {restaurant.address.building} {restaurant.address.street}\r\n                  </td>\r\n                  <td>{restaurant.borough}</td>\r\n                  <td>{restaurant.cuisine}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n          <Pagination>\r\n            <Pagination.Prev onClick={() => previousPage()} />\r\n            <Pagination.Item>{page}</Pagination.Item>\r\n            <Pagination.Next onClick={() => nextPage()} />\r\n          </Pagination>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <Card>\r\n            <Card.Body>\r\n              <Card.Text>No Restaurants Found</Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Restaurants;\r\n","function NotFound() {\r\n  return (\r\n    <div>\r\n      <h1>Not Found</h1>\r\n      <p>We can't find what you're looking for...</p>\r\n      <p>So, please search something new</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","import \"./App.css\";\nimport {\n  Button,\n  Col,\n  Container,\n  Form,\n  FormControl,\n  Nav,\n  Navbar,\n  Row,\n} from \"react-bootstrap\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport About from \"./component/About\";\nimport Restaurant from \"./component/Restaurant\";\nimport Restaurants from \"./component/Restaurants\";\nimport NotFound from \"./component/NotFound\";\n\nfunction App() {\n  const [searchString, setSearchString] = useState(\"\");\n\n  //add handleSubmit(e) function\n  let history = useHistory();\n  function handleSubmit(e) {\n    e.preventDefault();\n    history.push(\"/restaurants?borough=\" + searchString);\n    setSearchString((prevString) => \"\");\n  }\n\n  return (\n    <>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <LinkContainer to=\"/\">\n          <Navbar.Brand>New York Restaurants</Navbar.Brand>\n        </LinkContainer>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <LinkContainer to=\"/restaurants\">\n              <Nav.Link>Full List</Nav.Link>\n            </LinkContainer>\n            <LinkContainer to=\"/about\">\n              <Nav.Link>About</Nav.Link>\n            </LinkContainer>\n          </Nav>\n          <Form onSubmit={handleSubmit} inline>\n            <FormControl\n              type=\"text\"\n              placeholder=\"Borough\"\n              className=\"mr-sm-2\"\n              value={searchString}\n              onChange={(e) => setSearchString(e.target.value)}\n            />\n            <Button type=\"submit\" variant=\"outline-success\">\n              Search\n            </Button>\n          </Form>\n        </Navbar.Collapse>\n      </Navbar>\n      <br />\n      <Container>\n        <Row>\n          <Col>\n            <Switch>\n              <Route exact path=\"/\">\n                <Redirect to=\"/Restaurants\" />\n              </Route>\n              <Route exact path=\"/about\">\n                <About />\n              </Route>\n              <Route exact path=\"/Restaurants\">\n                <Restaurants />\n              </Route>\n              <Route path=\"/Restaurant/:id\">\n                <Restaurant />\n              </Route>\n              <Route>\n                <NotFound />\n              </Route>\n            </Switch>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/*********************************************************************************\n *  WEB422 – Assignment 3\n *  I declare that this assignment is my own work in accordance with Seneca Academic Policy.\n *  No part of this assignment has been copied manually or electronically from any other source\n *  (including web sites) or distributed to other students.\n *\n *  Name: Shani Patel   Student ID: 152243192    Date: 14th Oct 2021\n *\n *\n ********************************************************************************/\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}